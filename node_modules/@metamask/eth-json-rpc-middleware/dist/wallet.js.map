{"version":3,"file":"wallet.js","sourceRoot":"","sources":["../src/wallet.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAkD;AAElD,+DAGmC;AACnC,qDAAiD;AACjD,2CAAoD;AASpD,+EAAyE;AAEzE,+EAA0E;AAE1E,mEAA8D;AAE9D,2CAAyD;AACzD,iDAA6E;AAC7E,mDAG4B;AA0E5B,SAAgB,sBAAsB,CAAC,EACrC,WAAW,EACX,cAAc,EACd,eAAe,EACf,qBAAqB,EACrB,0BAA0B,EAC1B,sBAAsB,EACtB,kBAAkB,EAClB,sBAAsB,EACtB,mBAAmB,EACnB,qBAAqB,EACrB,qBAAqB,EACrB,gBAAgB,GAEK;IACrB,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IAED,OAAO,IAAA,0CAAwB,EAAC;QAC9B,kBAAkB;QAClB,YAAY,EAAE,IAAA,uCAAqB,EAAC,cAAc,CAAC;QACnD,YAAY,EAAE,IAAA,uCAAqB,EAAC,oBAAoB,CAAC;QAEzD,gBAAgB;QAChB,mBAAmB,EAAE,IAAA,uCAAqB,EAAC,eAAe,CAAC;QAC3D,mBAAmB,EAAE,IAAA,uCAAqB,EAAC,eAAe,CAAC;QAE3D,qBAAqB;QACrB,iBAAiB,EAAE,IAAA,uCAAqB,EAAC,aAAa,CAAC;QACvD,oBAAoB,EAAE,IAAA,uCAAqB,EAAC,eAAe,CAAC;QAC5D,oBAAoB,EAAE,IAAA,uCAAqB,EAAC,eAAe,CAAC;QAC5D,aAAa,EAAE,IAAA,uCAAqB,EAAC,YAAY,CAAC;QAClD,0BAA0B,EAAE,IAAA,uCAAqB,EAAC,mBAAmB,CAAC;QACtE,WAAW,EAAE,IAAA,uCAAqB,EAAC,cAAc,CAAC;QAClD,kBAAkB,EAAE,IAAA,uCAAqB,EAAC,eAAe,CAAC;QAE1D,WAAW;QACX,sBAAsB,EAAE,IAAA,uCAAqB,EAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAClE,IAAA,+CAAqB,EAAC,MAAM,EAAE,GAAG,EAAE,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CACrE;QACD,gBAAgB,EAAE,IAAA,uCAAqB,EAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAC5D,IAAA,mCAAe,EAAC,MAAM,EAAE,GAAG,EAAE,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC,CAChE;QACD,qBAAqB,EAAE,IAAA,uCAAqB,EAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CACjE,IAAA,8CAAoB,EAAC,MAAM,EAAE,GAAG,EAAE;YAChC,cAAc;SACf,CAAC,CACH;KACF,CAAC,CAAC;IAEH,EAAE;IACF,kBAAkB;IAClB,EAAE;IAEF,KAAK,UAAU,cAAc,CAC3B,GAAmB,EACnB,GAAiC;QAEjC,GAAG,CAAC,MAAM,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,UAAU,oBAAoB,CACjC,GAAmB,EACnB,GAAiC;QAEjC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC;QACxC,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IACnC,CAAC;IAED,EAAE;IACF,yBAAyB;IACzB,EAAE;IAEF,KAAK,UAAU,eAAe,CAC5B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,kBAAkB,EAAE;YACvB,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,GAAG,CAAC,MAAM;YACX,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAkC,CAAC;QAC9D,MAAM,QAAQ,mCACT,MAAM,KACT,IAAI,EAAE,MAAM,6BAA6B,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,KAAI,EAAE,EAAE,GAAG,CAAC,GACnE,CAAC;QACF,GAAG,CAAC,MAAM,GAAG,MAAM,kBAAkB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,UAAU,eAAe,CAC5B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,sBAAsB,EAAE;YAC3B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,GAAG,CAAC,MAAM;YACX,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAkC,CAAC;QAC9D,MAAM,QAAQ,mCACT,MAAM,KACT,IAAI,EAAE,MAAM,6BAA6B,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,KAAI,EAAE,EAAE,GAAG,CAAC,GACnE,CAAC;QACF,GAAG,CAAC,MAAM,GAAG,MAAM,sBAAsB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC3D,CAAC;IAED,EAAE;IACF,qBAAqB;IACrB,EAAE;IACF,KAAK,UAAU,aAAa,CAC1B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,mBAAmB,EAAE;YACxB,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAIlB,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,OAAO,GAAG,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QACpC,MAAM,SAAS,mCACV,WAAW,KACd,IAAI,EAAE,OAAO,EACb,IAAI,EAAE,OAAO,EACb,eAAe,EAAE,mBAAmB,EACpC,OAAO,GACR,CAAC;QAEF,GAAG,CAAC,MAAM,GAAG,MAAM,mBAAmB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,UAAU,eAAe,CAC5B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,qBAAqB,EAAE;YAC1B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAA0B,CAAC;QAE9C,MAAM,OAAO,GAAG,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAA,iCAAqB,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC7B,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,SAAS,GAAuB;YACpC,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,OAAO;YACb,OAAO;YACP,eAAe,EAAE,sBAAsB;SACxC,CAAC;QAEF,GAAG,CAAC,MAAM,GAAG,MAAM,qBAAqB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,UAAU,eAAe,CAC5B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,qBAAqB,EAAE;YAC1B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAA0B,CAAC;QAE9C,MAAM,OAAO,GAAG,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAA,iCAAqB,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC7B,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,SAAS,GAAuB;YACpC,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,OAAO;YACb,OAAO;YACP,eAAe,EAAE,sBAAsB;SACxC,CAAC;QAEF,GAAG,CAAC,MAAM,GAAG,MAAM,qBAAqB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,UAAU,YAAY,CACzB,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,sBAAsB,EAAE;YAC3B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAA8C,CAAC;QAElE,mBAAmB;QACnB,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9B,mEAAmE;QACnE,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEpC,qDAAqD;QACrD,0DAA0D;QAC1D,oEAAoE;QACpE,mCAAmC;QACnC,EAAE;QACF,4DAA4D;QAC5D,sDAAsD;QACtD,IAAI,OAAe,EAAE,OAAe,CAAC;QACrC,IAAI,IAAA,6BAAgB,EAAC,UAAU,CAAC,IAAI,CAAC,IAAA,6BAAgB,EAAC,WAAW,CAAC,EAAE;YAClE,IAAI,OAAO,GAAG,sDAAsD,CAAC;YACrE,OAAO,IAAI,+DAA+D,CAAC;YAC3E,OAAO,IAAI,wCAAwC,CAAC;YACpD,OAAO,IAAI,mEAAmE,CAAC;YAC9E,GAAW,CAAC,OAAO,GAAG,OAAO,CAAC;YAE/B,OAAO,GAAG,UAAU,CAAC;YACrB,OAAO,GAAG,WAAW,CAAC;SACvB;aAAM;YACL,OAAO,GAAG,UAAU,CAAC;YACrB,OAAO,GAAG,WAAW,CAAC;SACvB;QACD,OAAO,GAAG,MAAM,6BAA6B,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAE5D,MAAM,SAAS,mCACV,WAAW,KACd,IAAI,EAAE,OAAO,EACb,IAAI,EAAE,OAAO,EACb,eAAe,EAAE,eAAe,GACjC,CAAC;QAEF,kDAAkD;QAClD,GAAG,CAAC,MAAM,GAAG,MAAM,sBAAsB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED,KAAK,UAAU,eAAe,CAC5B,GAAmB,EACnB,GAAiC;QAEjC,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAA0B,CAAC;QAC9C,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC;YACrD,IAAI,EAAE,OAAO;YACb,SAAS;SACV,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,GAAG,aAAa,CAAC;IAC7B,CAAC;IAED,KAAK,UAAU,mBAAmB,CAChC,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,0BAA0B,EAAE;YAC/B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAAkB,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAEpE,GAAG,CAAC,MAAM,GAAG,MAAM,0BAA0B,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC9D,CAAC;IAED,KAAK,UAAU,cAAc,CAC3B,GAAmB,EACnB,GAAiC;QAEjC,IAAI,CAAC,qBAAqB,EAAE;YAC1B,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;SACtC;QACD,IACE,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,CAAA;YACZ,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAC1B,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,EACzB;YACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QACD,MAAM,MAAM,GAAG,GAAG,CAAC,MAAiD,CAAC;QAErE,MAAM,UAAU,GAAW,MAAM,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,OAAO,GAAW,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC5E,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QACpC,MAAM,SAAS,mCACV,WAAW,KACd,IAAI,EAAE,OAAO,EACb,IAAI,EAAE,UAAU,GACjB,CAAC;QAEF,GAAG,CAAC,MAAM,GAAG,MAAM,qBAAqB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC3D,CAAC;IAED,EAAE;IACF,UAAU;IACV,EAAE;IAEF;;;;;;;;OAQG;IACH,KAAK,UAAU,6BAA6B,CAC1C,OAAe,EACf,GAAmB;QAEnB,OAAO,IAAA,0CAAiB,EAAC,OAAc,EAAE,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IACjE,CAAC;AACH,CAAC;AAnXD,wDAmXC;AAED;;;;GAIG;AACH,SAAS,mBAAmB,CAAC,IAAY;IACvC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,IAAA,6BAAiB,EAAC,IAAI,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;KAChC;IAED,gCAAgC;IAChC,MAAM,QAAQ,GAAG,IAAA,gCAAuB,EAAC,WAAW,CAAC,CAAC;IAEtD,sDAAsD;IACtD,MAAM,mBAAmB,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC5C,IAAI,CAAC,mBAAmB,EAAE;QACxB,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;KAChC;AACH,CAAC;AAED;;;;;;;;GAQG;AACH,SAAS,yBAAyB,CAAC,IAAY;IAC7C,MAAM,EAAE,MAAM,EAAE,EAAE,iBAAiB,EAAE,GAAG,EAAE,EAAE,GAAG,IAAA,6BAAiB,EAAC,IAAI,CAAC,CAAC;IACvE,sEAAsE;IACtE,iEAAiE;IACjE,IACE,iBAAiB;QAChB,iBAA4B,KAAK,QAAQ;QAC1C,CAAC,IAAA,yBAAiB,EAAC,iBAAiB,CAAC,EACrC;QACA,MAAM,sBAAS,CAAC,YAAY,EAAE,CAAC;KAChC;AACH,CAAC","sourcesContent":["import * as sigUtil from '@metamask/eth-sig-util';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n} from '@metamask/json-rpc-engine';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport { isValidHexAddress } from '@metamask/utils';\nimport type {\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n  Json,\n  Hex,\n} from '@metamask/utils';\n\nimport type { GetCallsStatusHook } from './methods/wallet-get-calls-status';\nimport { walletGetCallsStatus } from './methods/wallet-get-calls-status';\nimport type { GetCapabilitiesHook } from './methods/wallet-get-capabilities';\nimport { walletGetCapabilities } from './methods/wallet-get-capabilities';\nimport type { ProcessSendCallsHook } from './methods/wallet-send-calls';\nimport { walletSendCalls } from './methods/wallet-send-calls';\nimport type { Block } from './types';\nimport { stripArrayTypeIfPresent } from './utils/common';\nimport { normalizeTypedMessage, parseTypedMessage } from './utils/normalize';\nimport {\n  resemblesAddress,\n  validateAndNormalizeKeyholder as validateKeyholder,\n} from './utils/validation';\n\n/*\nexport type TransactionParams = {\n  [prop: string]: Json;\n  from: string;\n}\n*/\n\n/*\nexport type TransactionParams = JsonRpcParams & {\n  from: string;\n}\n*/\n\nexport type TransactionParams = {\n  from: string;\n};\n\nexport type MessageParams = TransactionParams & {\n  data: string;\n  signatureMethod?: string;\n};\n\nexport type TypedMessageParams = MessageParams & {\n  version: string;\n};\n\nexport type TypedMessageV1Params = Omit<TypedMessageParams, 'data'> & {\n  data: Record<string, unknown>[];\n};\n\nexport interface WalletMiddlewareOptions {\n  getAccounts: (req: JsonRpcRequest) => Promise<string[]>;\n  getCallsStatus?: GetCallsStatusHook;\n  getCapabilities?: GetCapabilitiesHook;\n  processDecryptMessage?: (\n    msgParams: MessageParams,\n    req: JsonRpcRequest,\n  ) => Promise<string>;\n  processEncryptionPublicKey?: (\n    address: string,\n    req: JsonRpcRequest,\n  ) => Promise<string>;\n  processPersonalMessage?: (\n    msgParams: MessageParams,\n    req: JsonRpcRequest,\n  ) => Promise<string>;\n  processTransaction?: (\n    txParams: TransactionParams,\n    req: JsonRpcRequest,\n  ) => Promise<string>;\n  processSignTransaction?: (\n    txParams: TransactionParams,\n    req: JsonRpcRequest,\n  ) => Promise<string>;\n  processTypedMessage?: (\n    msgParams: TypedMessageV1Params,\n    req: JsonRpcRequest,\n    version: string,\n  ) => Promise<string>;\n  processTypedMessageV3?: (\n    msgParams: TypedMessageParams,\n    req: JsonRpcRequest,\n    version: string,\n  ) => Promise<string>;\n  processTypedMessageV4?: (\n    msgParams: TypedMessageParams,\n    req: JsonRpcRequest,\n    version: string,\n  ) => Promise<string>;\n  processSendCalls?: ProcessSendCallsHook;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getCallsStatus,\n  getCapabilities,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n  processSendCalls,\n}: // }: WalletMiddlewareOptions): JsonRpcMiddleware<string, Block> {\nWalletMiddlewareOptions): JsonRpcMiddleware<any, Block> {\n  if (!getAccounts) {\n    throw new Error('opts.getAccounts is required');\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n\n    // message signatures\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n    personal_ecRecover: createAsyncMiddleware(personalRecover),\n\n    // EIP-5792\n    wallet_getCapabilities: createAsyncMiddleware(async (params, req) =>\n      walletGetCapabilities(params, req, { getAccounts, getCapabilities }),\n    ),\n    wallet_sendCalls: createAsyncMiddleware(async (params, req) =>\n      walletSendCalls(params, req, { getAccounts, processSendCalls }),\n    ),\n    wallet_getCallsStatus: createAsyncMiddleware(async (params, req) =>\n      walletGetCallsStatus(params, req, {\n        getCallsStatus,\n      }),\n    ),\n  });\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 1)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params[0] as TransactionParams | undefined;\n    const txParams: TransactionParams = {\n      ...params,\n      from: await validateAndNormalizeKeyholder(params?.from || '', req),\n    };\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processSignTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 1)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params[0] as TransactionParams | undefined;\n    const txParams: TransactionParams = {\n      ...params,\n      from: await validateAndNormalizeKeyholder(params?.from || '', req),\n    };\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n  async function signTypedData(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processTypedMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 2)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [\n      Record<string, unknown>[],\n      string,\n      Record<string, string>?,\n    ];\n    const message = params[0];\n    const address = await validateAndNormalizeKeyholder(params[1], req);\n    const version = 'V1';\n    const extraParams = params[2] || {};\n    const msgParams: TypedMessageV1Params = {\n      ...extraParams,\n      from: address,\n      data: message,\n      signatureMethod: 'eth_signTypedData',\n      version,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 2)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [string, string];\n\n    const address = await validateAndNormalizeKeyholder(params[0], req);\n    const message = normalizeTypedMessage(params[1]);\n    validatePrimaryType(message);\n    validateVerifyingContract(message);\n    const version = 'V3';\n    const msgParams: TypedMessageParams = {\n      data: message,\n      from: address,\n      version,\n      signatureMethod: 'eth_signTypedData_v3',\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 2)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [string, string];\n\n    const address = await validateAndNormalizeKeyholder(params[0], req);\n    const message = normalizeTypedMessage(params[1]);\n    validatePrimaryType(message);\n    validateVerifyingContract(message);\n    const version = 'V4';\n    const msgParams: TypedMessageParams = {\n      data: message,\n      from: address,\n      version,\n      signatureMethod: 'eth_signTypedData_v4',\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processPersonalMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 2)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [string, string, TransactionParams?];\n\n    // process normally\n    const firstParam = params[0];\n    const secondParam = params[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams = params[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams = {\n      ...extraParams,\n      from: address,\n      data: message,\n      signatureMethod: 'personal_sign',\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function personalRecover(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 2)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [string, string];\n    const message = params[0];\n    const signature = params[1];\n    const signerAddress = sigUtil.recoverPersonalSignature({\n      data: message,\n      signature,\n    });\n\n    res.result = signerAddress;\n  }\n\n  async function encryptionPublicKey(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 1)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n\n    const params = req.params as [string];\n\n    const address = await validateAndNormalizeKeyholder(params[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(\n    req: JsonRpcRequest,\n    res: PendingJsonRpcResponse<Json>,\n  ): Promise<void> {\n    if (!processDecryptMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n    if (\n      !req?.params ||\n      !Array.isArray(req.params) ||\n      !(req.params.length >= 1)\n    ) {\n      throw rpcErrors.invalidInput();\n    }\n    const params = req.params as [string, string, Record<string, Json>?];\n\n    const ciphertext: string = params[0];\n    const address: string = await validateAndNormalizeKeyholder(params[1], req);\n    const extraParams = params[2] || {};\n    const msgParams: MessageParams = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = await processDecryptMessage(msgParams, req);\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * @param address - The address to validate and normalize.\n   * @param req - The request object.\n   * @returns {string} - The normalized address, if valid. Otherwise, throws\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(\n    address: string,\n    req: JsonRpcRequest,\n  ): Promise<string> {\n    return validateKeyholder(address as Hex, req, { getAccounts });\n  }\n}\n\n/**\n * Validates primary of typedSignMessage, to ensure that it's type definition is present in message.\n *\n * @param data - The data passed in typedSign request.\n */\nfunction validatePrimaryType(data: string) {\n  const { primaryType, types } = parseTypedMessage(data);\n  if (!types) {\n    throw rpcErrors.invalidInput();\n  }\n\n  // Primary type can be an array.\n  const baseType = stripArrayTypeIfPresent(primaryType);\n\n  // Return if the base type is not defined in the types\n  const baseTypeDefinitions = types[baseType];\n  if (!baseTypeDefinitions) {\n    throw rpcErrors.invalidInput();\n  }\n}\n\n/**\n * Validates verifyingContract of typedSignMessage.\n *\n * @param data - The data passed in typedSign request.\n * This function allows the verifyingContract to be either:\n * - A valid hex address\n * - The string \"cosmos\" (as it is hard-coded in some Cosmos ecosystem's EVM adapters)\n * - An empty string\n */\nfunction validateVerifyingContract(data: string) {\n  const { domain: { verifyingContract } = {} } = parseTypedMessage(data);\n  // Explicit check for cosmos here has been added to address this issue\n  // https://github.com/MetaMask/eth-json-rpc-middleware/issues/337\n  if (\n    verifyingContract &&\n    (verifyingContract as string) !== 'cosmos' &&\n    !isValidHexAddress(verifyingContract)\n  ) {\n    throw rpcErrors.invalidInput();\n  }\n}\n"]}