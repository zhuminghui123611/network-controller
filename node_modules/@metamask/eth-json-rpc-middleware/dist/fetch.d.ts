import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';
import type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';
import type { AbstractRpcService } from './types';
/**
 * @deprecated Please use {@link JsonRpcRequestWithOrigin} instead.
 */
export interface PayloadWithOrigin extends JsonRpcRequest {
    origin?: string;
}
interface Request {
    method: string;
    headers: Record<string, string>;
    body: string;
}
interface FetchConfig {
    fetchUrl: string;
    fetchParams: Request;
}
/**
 * Creates middleware for sending a JSON-RPC request through the given RPC
 * service.
 *
 * @param args - The arguments to this function.
 * @param args.rpcService - The RPC service to use.
 * @param args.options - Options.
 * @param args.options.originHttpHeaderKey - If provided, the origin field for
 * each JSON-RPC request will be attached to each outgoing fetch request under
 * this header.
 * @returns The fetch middleware.
 */
export declare function createFetchMiddleware(args: {
    rpcService: AbstractRpcService;
    options?: {
        originHttpHeaderKey?: string;
    };
}): JsonRpcMiddleware<JsonRpcParams, Json>;
/**
 * Creates middleware for sending a JSON-RPC request to the given RPC URL.
 *
 * @deprecated This overload is deprecated â€” please pass an `RpcService`
 * instance from `@metamask/network-controller` instead.
 * @param args - The arguments to this function.
 * @param args.btoa - Generates a base64-encoded string from a binary string.
 * @param args.fetch - The `fetch` function; expected to be equivalent to
 * `window.fetch`.
 * @param args.rpcUrl - The URL to send the request to.
 * @param args.originHttpHeaderKey - If provided, the origin field for each
 * JSON-RPC request will be attached to each outgoing fetch request under this
 * header.
 * @returns The fetch middleware.
 */
export declare function createFetchMiddleware(args: {
    btoa: (stringToEncode: string) => string;
    fetch: typeof fetch;
    rpcUrl: string;
    originHttpHeaderKey?: string;
}): JsonRpcMiddleware<JsonRpcParams, Json>;
/**
 * Generate `fetch` configuration for sending the given request to an RPC API.
 *
 * @deprecated This function was created to support a now-deprecated signature
 * for {@link createFetchMiddleware}. It will be removed in a future major
 * version.
 * @param options - Options
 * @param options.btoa - Generates a base64-encoded string from a binary string.
 * @param options.rpcUrl - The URL to send the request to.
 * @param options.originHttpHeaderKey - If provider, the origin field for each JSON-RPC request
 * will be attached to each outgoing fetch request under this header.
 * @param options.req
 * @returns The fetch middleware.
 */
export declare function createFetchConfigFromReq({ btoa, req, rpcUrl, originHttpHeaderKey, }: {
    btoa: (stringToEncode: string) => string;
    rpcUrl: string;
    originHttpHeaderKey?: string;
    req: PayloadWithOrigin;
}): FetchConfig;
export {};
