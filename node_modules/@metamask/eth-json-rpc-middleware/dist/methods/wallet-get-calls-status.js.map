{"version":3,"file":"wallet-get-calls-status.js","sourceRoot":"","sources":["../../src/methods/wallet-get-calls-status.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AAEjD,uDAA8C;AAO9C,2CAAkD;AAElD,oDAAqD;AAErD,MAAM,oBAAoB,GAAG,IAAA,mBAAK,EAAC,CAAC,uBAAe,CAAC,CAAC,CAAC;AAEtD,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,mEAAa,CAAA;IACb,uEAAe,CAAA;IACf,mFAAqB,CAAA;IACrB,qEAAc,CAAA;IACd,qFAAsB,CAAA;AACxB,CAAC,EANW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAM7B;AA8BM,KAAK,UAAU,oBAAoB,CACxC,GAAmB,EACnB,GAAiC,EACjC,EACE,cAAc,GAGf;IAED,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;KACtC;IAED,IAAA,2BAAc,EAAC,GAAG,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;IAEjD,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEzB,GAAG,CAAC,MAAM,GAAG,MAAM,cAAc,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AAlBD,oDAkBC","sourcesContent":["import { rpcErrors } from '@metamask/rpc-errors';\nimport type { Infer } from '@metamask/superstruct';\nimport { tuple } from '@metamask/superstruct';\nimport type {\n  Hex,\n  Json,\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport { StrictHexStruct } from '@metamask/utils';\n\nimport { validateParams } from '../utils/validation';\n\nconst GetCallsStatusStruct = tuple([StrictHexStruct]);\n\nexport enum GetCallsStatusCode {\n  PENDING = 100,\n  CONFIRMED = 200,\n  FAILED_OFFCHAIN = 400,\n  REVERTED = 500,\n  REVERTED_PARTIAL = 600,\n}\n\nexport type GetCallsStatusParams = Infer<typeof GetCallsStatusStruct>;\n\nexport type GetCallsStatusResult = {\n  version: string;\n  id: Hex;\n  chainId: Hex;\n  status: number;\n  atomic: boolean;\n  receipts?: {\n    logs: {\n      address: Hex;\n      data: Hex;\n      topics: Hex[];\n    }[];\n    status: '0x0' | '0x1';\n    blockHash: Hex;\n    blockNumber: Hex;\n    gasUsed: Hex;\n    transactionHash: Hex;\n  }[];\n  capabilities?: Record<string, Json>;\n};\n\nexport type GetCallsStatusHook = (\n  id: GetCallsStatusParams[0],\n  req: JsonRpcRequest,\n) => Promise<GetCallsStatusResult>;\n\nexport async function walletGetCallsStatus(\n  req: JsonRpcRequest,\n  res: PendingJsonRpcResponse<Json>,\n  {\n    getCallsStatus,\n  }: {\n    getCallsStatus?: GetCallsStatusHook;\n  },\n): Promise<void> {\n  if (!getCallsStatus) {\n    throw rpcErrors.methodNotSupported();\n  }\n\n  validateParams(req.params, GetCallsStatusStruct);\n\n  const id = req.params[0];\n\n  res.result = await getCallsStatus(id, req);\n}\n"]}