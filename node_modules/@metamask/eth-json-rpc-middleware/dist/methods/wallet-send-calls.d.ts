import type { Infer } from '@metamask/superstruct';
import type { Hex, Json, JsonRpcRequest, PendingJsonRpcResponse } from '@metamask/utils';
declare const SendCallsStruct: import("@metamask/superstruct").Struct<[{
    chainId: `0x${string}`;
    version: string;
    atomicRequired: boolean;
    calls: {
        data?: `0x${string}` | undefined;
        value?: `0x${string}` | undefined;
        capabilities?: Record<string, {
            optional?: boolean | undefined;
        }> | undefined;
        to?: `0x${string}` | undefined;
    }[];
    id?: `0x${string}` | undefined;
    from?: `0x${string}` | undefined;
    capabilities?: Record<string, {
        optional?: boolean | undefined;
    }> | undefined;
}], null>;
export declare type SendCallsParams = Infer<typeof SendCallsStruct>;
export declare type SendCalls = SendCallsParams[0];
export declare type SendCallsResult = {
    id: Hex;
    capabilities?: Record<string, Json>;
};
export declare type ProcessSendCallsHook = (sendCalls: SendCalls, req: JsonRpcRequest) => Promise<SendCallsResult>;
export declare function walletSendCalls(req: JsonRpcRequest, res: PendingJsonRpcResponse<Json>, { getAccounts, processSendCalls, }: {
    getAccounts: (req: JsonRpcRequest) => Promise<string[]>;
    processSendCalls?: ProcessSendCallsHook;
}): Promise<void>;
export {};
