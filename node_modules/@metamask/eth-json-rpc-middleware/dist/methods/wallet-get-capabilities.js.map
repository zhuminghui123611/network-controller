{"version":3,"file":"wallet-get-capabilities.js","sourceRoot":"","sources":["../../src/methods/wallet-get-capabilities.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AAEjD,uDAA+D;AAO/D,2CAA4E;AAE5E,oDAG6B;AAE7B,MAAM,qBAAqB,GAAG,IAAA,mBAAK,EAAC;IAClC,gCAAwB;IACxB,IAAA,sBAAQ,EAAC,IAAA,mBAAK,EAAC,uBAAe,CAAC,CAAC;CACjC,CAAC,CAAC;AAWI,KAAK,UAAU,qBAAqB,CACzC,GAAmB,EACnB,GAAiC,EACjC,EACE,WAAW,EACX,eAAe,GAIhB;IAED,IAAI,CAAC,eAAe,EAAE;QACpB,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;KACtC;IAED,IAAA,2BAAc,EAAC,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;IAElD,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE/B,MAAM,IAAA,0CAA6B,EAAC,OAAO,EAAE,GAAG,EAAE;QAChD,WAAW;KACZ,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IAEnE,GAAG,CAAC,MAAM,GAAG,YAAY,CAAC;AAC5B,CAAC;AA3BD,sDA2BC","sourcesContent":["import { rpcErrors } from '@metamask/rpc-errors';\nimport type { Infer } from '@metamask/superstruct';\nimport { array, optional, tuple } from '@metamask/superstruct';\nimport type {\n  Hex,\n  Json,\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport { StrictHexStruct, HexChecksumAddressStruct } from '@metamask/utils';\n\nimport {\n  validateAndNormalizeKeyholder,\n  validateParams,\n} from '../utils/validation';\n\nconst GetCapabilitiesStruct = tuple([\n  HexChecksumAddressStruct,\n  optional(array(StrictHexStruct)),\n]);\n\nexport type GetCapabilitiesParams = Infer<typeof GetCapabilitiesStruct>;\nexport type GetCapabilitiesResult = Record<Hex, Record<string, Json>>;\n\nexport type GetCapabilitiesHook = (\n  address: GetCapabilitiesParams[0],\n  chainIds: GetCapabilitiesParams[1],\n  req: JsonRpcRequest,\n) => Promise<GetCapabilitiesResult>;\n\nexport async function walletGetCapabilities(\n  req: JsonRpcRequest,\n  res: PendingJsonRpcResponse<Json>,\n  {\n    getAccounts,\n    getCapabilities,\n  }: {\n    getAccounts: (req: JsonRpcRequest) => Promise<string[]>;\n    getCapabilities?: GetCapabilitiesHook;\n  },\n): Promise<void> {\n  if (!getCapabilities) {\n    throw rpcErrors.methodNotSupported();\n  }\n\n  validateParams(req.params, GetCapabilitiesStruct);\n\n  const address = req.params[0];\n  const chainIds = req.params[1];\n\n  await validateAndNormalizeKeyholder(address, req, {\n    getAccounts,\n  });\n\n  const capabilities = await getCapabilities(address, chainIds, req);\n\n  res.result = capabilities;\n}\n"]}