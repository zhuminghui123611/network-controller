{"version":3,"file":"wallet-send-calls.js","sourceRoot":"","sources":["../../src/methods/wallet-send-calls.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AAEjD,uDAU+B;AAO/B,2CAA4E;AAE5E,oDAG6B;AAE7B,MAAM,kBAAkB,GAAG,IAAA,oBAAM,EAC/B,IAAA,oBAAM,GAAE,EACR,IAAA,kBAAI,EAAC;IACH,QAAQ,EAAE,IAAA,sBAAQ,EAAC,IAAA,qBAAO,GAAE,CAAC;CAC9B,CAAC,CACH,CAAC;AAEF,MAAM,eAAe,GAAG,IAAA,mBAAK,EAAC;IAC5B,IAAA,oBAAM,EAAC;QACL,OAAO,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;QAC3B,EAAE,EAAE,IAAA,sBAAQ,EAAC,uBAAe,CAAC;QAC7B,IAAI,EAAE,IAAA,sBAAQ,EAAC,gCAAwB,CAAC;QACxC,OAAO,EAAE,uBAAe;QACxB,cAAc,EAAE,IAAA,qBAAO,GAAE;QACzB,KAAK,EAAE,IAAA,mBAAK,EACV,IAAA,oBAAM,EAAC;YACL,EAAE,EAAE,IAAA,sBAAQ,EAAC,gCAAwB,CAAC;YACtC,IAAI,EAAE,IAAA,sBAAQ,EAAC,uBAAe,CAAC;YAC/B,KAAK,EAAE,IAAA,sBAAQ,EAAC,uBAAe,CAAC;YAChC,YAAY,EAAE,IAAA,sBAAQ,EAAC,kBAAkB,CAAC;SAC3C,CAAC,CACH;QACD,YAAY,EAAE,IAAA,sBAAQ,EAAC,kBAAkB,CAAC;KAC3C,CAAC;CACH,CAAC,CAAC;AAeI,KAAK,UAAU,eAAe,CACnC,GAAmB,EACnB,GAAiC,EACjC,EACE,WAAW,EACX,gBAAgB,GAIjB;IAED,IAAI,CAAC,gBAAgB,EAAE;QACrB,MAAM,sBAAS,CAAC,kBAAkB,EAAE,CAAC;KACtC;IAED,IAAA,2BAAc,EAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE7B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI;QACtB,CAAC,CAAC,MAAM,IAAA,0CAA6B,EAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YACpD,WAAW;SACZ,CAAC;QACJ,CAAC,CAAC,SAAS,CAAC;IAEd,MAAM,SAAS,mCACV,MAAM,KACT,IAAI,GACL,CAAC;IAEF,GAAG,CAAC,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACtD,CAAC;AA/BD,0CA+BC","sourcesContent":["import { rpcErrors } from '@metamask/rpc-errors';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  boolean,\n  record,\n  nonempty,\n  type,\n  string,\n  array,\n  object,\n  optional,\n  tuple,\n} from '@metamask/superstruct';\nimport type {\n  Hex,\n  Json,\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n} from '@metamask/utils';\nimport { HexChecksumAddressStruct, StrictHexStruct } from '@metamask/utils';\n\nimport {\n  validateAndNormalizeKeyholder,\n  validateParams,\n} from '../utils/validation';\n\nconst CapabilitiesStruct = record(\n  string(),\n  type({\n    optional: optional(boolean()),\n  }),\n);\n\nconst SendCallsStruct = tuple([\n  object({\n    version: nonempty(string()),\n    id: optional(StrictHexStruct),\n    from: optional(HexChecksumAddressStruct),\n    chainId: StrictHexStruct,\n    atomicRequired: boolean(),\n    calls: array(\n      object({\n        to: optional(HexChecksumAddressStruct),\n        data: optional(StrictHexStruct),\n        value: optional(StrictHexStruct),\n        capabilities: optional(CapabilitiesStruct),\n      }),\n    ),\n    capabilities: optional(CapabilitiesStruct),\n  }),\n]);\n\nexport type SendCallsParams = Infer<typeof SendCallsStruct>;\nexport type SendCalls = SendCallsParams[0];\n\nexport type SendCallsResult = {\n  id: Hex;\n  capabilities?: Record<string, Json>;\n};\n\nexport type ProcessSendCallsHook = (\n  sendCalls: SendCalls,\n  req: JsonRpcRequest,\n) => Promise<SendCallsResult>;\n\nexport async function walletSendCalls(\n  req: JsonRpcRequest,\n  res: PendingJsonRpcResponse<Json>,\n  {\n    getAccounts,\n    processSendCalls,\n  }: {\n    getAccounts: (req: JsonRpcRequest) => Promise<string[]>;\n    processSendCalls?: ProcessSendCallsHook;\n  },\n): Promise<void> {\n  if (!processSendCalls) {\n    throw rpcErrors.methodNotSupported();\n  }\n\n  validateParams(req.params, SendCallsStruct);\n\n  const params = req.params[0];\n\n  const from = params.from\n    ? await validateAndNormalizeKeyholder(params.from, req, {\n        getAccounts,\n      })\n    : undefined;\n\n  const sendCalls: SendCalls = {\n    ...params,\n    from,\n  };\n\n  res.result = await processSendCalls(sendCalls, req);\n}\n"]}