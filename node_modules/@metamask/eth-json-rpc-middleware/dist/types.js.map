{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport type {\n  Json,\n  JsonRpcParams,\n  JsonRpcRequest,\n  JsonRpcResponse,\n} from '@metamask/utils';\n\nexport interface JsonRpcRequestToCache<Params extends JsonRpcParams>\n  extends JsonRpcRequest<Params> {\n  skipCache?: boolean;\n}\n\nexport type JsonRpcCacheMiddleware<\n  Params extends JsonRpcParams,\n  Result extends Json,\n> = JsonRpcMiddleware<Params, Result> extends (\n  req: JsonRpcRequest<Params>,\n  ...args: infer X\n) => infer Y\n  ? (req: JsonRpcRequestToCache<Params>, ...args: X) => Y\n  : never;\n\nexport type BlockData = string | string[];\n\nexport type Block = Record<string, BlockData>;\n\nexport type BlockCache = Record<string, Block>;\n\nexport type Cache = Record<number, BlockCache>;\n\n/**\n * The interface for a service class responsible for making a request to an RPC\n * endpoint.\n */\nexport type AbstractRpcService = {\n  /**\n   * Listens for when the RPC service retries the request.\n   *\n   * @param listener - The callback to be called when the retry occurs.\n   * @returns A disposable.\n   */\n  onRetry: (\n    listener: (\n      data: ({ error: Error } | { value: unknown }) & {\n        delay: number;\n        attempt: number;\n        endpointUrl: string;\n      },\n    ) => void,\n  ) => {\n    dispose(): void;\n  };\n\n  /**\n   * Listens for when the RPC service retries the request too many times in a\n   * row.\n   *\n   * @param listener - The callback to be called when the circuit is broken.\n   * @returns A disposable.\n   */\n  onBreak: (\n    listener: (\n      data: ({ error: Error } | { value: unknown } | { isolated: true }) & {\n        endpointUrl: string;\n      },\n    ) => void,\n  ) => {\n    dispose(): void;\n  };\n\n  /**\n   * Listens for when the policy underlying this RPC service detects a slow\n   * request.\n   *\n   * @param listener - The callback to be called when the request is slow.\n   * @returns A disposable.\n   */\n  onDegraded: (listener: (data: { endpointUrl: string }) => void) => {\n    dispose(): void;\n  };\n\n  /**\n   * Makes a request to the RPC endpoint.\n   */\n  request<Params extends JsonRpcParams, Result extends Json>(\n    jsonRpcRequest: JsonRpcRequest<Params>,\n    fetchOptions?: RequestInit,\n  ): Promise<JsonRpcResponse<Result | null>>;\n};\n"]}